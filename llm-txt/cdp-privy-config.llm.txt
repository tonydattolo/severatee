Wallet Management

AgentKit supports multiple wallet providers, with the CDP Wallet API being the default implementation. It supports the following operations, alongside compatibility with the full suite of CDP products including Onramp, onchain reputation score, and Commerce:

    Creating API Wallets
    Signing transactions
    Deploying and interacting with tokens
    Invoking smart contracts and querying chain state

Wallet Configuration

You can configure AgentKit to use a CDP wallet or a custom wallet provider.

The PrivyWalletProvider is a wallet provider that uses Privy Server Wallets. This implementation extends the ViemWalletProvider.

import { PrivyWalletProvider, PrivyWalletConfig } from "@coinbase/agentkit";

// Configure Wallet Provider
const config: PrivyWalletConfig = {
    appId: "PRIVY_APP_ID",
    appSecret: "PRIVY_APP_SECRET",
    chainId: "84532", // optional, defaults to 84532 (base-sepolia)
    walletId: "PRIVY_WALLET_ID", // optional, otherwise a new wallet will be created
    authorizationPrivateKey: PRIVY_WALLET_AUTHORIZATION_PRIVATE_KEY, // optional, required if your account is using authorization keys
    authorizationKeyId: PRIVY_WALLET_AUTHORIZATION_KEY_ID, // optional, only required to create a new wallet if walletId is not provided
};

const walletProvider = await PrivyWalletProvider.configureWithWallet(config);

Authorization Keys

Privy offers the option to use authorization keys to secure your server wallets.

You can manage authorization keys from your Privy dashboard or programmatically using the API.

When using authorization keys, you must provide the authorizationPrivateKey and authorizationKeyId parameters to the configureWithWallet method if you are creating a new wallet. Please note that when creating a key, if you enable "Create and modify wallets", you will be required to use that key when creating new wallets via the PrivyWalletProvider.

Exporting Privy Wallet information

The PrivyWalletProvider can export wallet information by calling the exportWallet method.

const walletData = await walletProvider.exportWallet();

// walletData will be in the following format:
{
    walletId: string;
    authorizationKey: string | undefined;
    networkId: string | undefined;
}

Default Operations

By default, AgentKit supports the following basic wallet operations:

    get_wallet_details - Get details about the Wallet, like the address
    transfer - Transfer assets between addresses
    get_balance - Get the balance of an asset

You can add additional actions or action providers upon agent instantiation.